#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <signal.h>

void childSignalHandler(int signum) {
    printf("Child process terminated with signal: %d\n", signum);
    exit(0);
}

void alarmHandler(int signum) {
    printf("Child process did not complete in 5 seconds. Killing the child process.\n");
    exit(1);
}

int main(int argc, char *argv[]) {
    if (argc < 2) {
        fprintf(stderr, "Usage: %s <command>\n", argv[0]);
        exit(1);
    }

    pid_t pid = fork();

    if (pid == -1) {
        perror("Fork error");
        exit(1);
    }

    if (pid == 0) {
        // Child process
        execvp(argv[1], &argv[1]);
        perror("Exec error");
        exit(1);
    } else {
        // Parent process
        signal(SIGCHLD, childSignalHandler);
        signal(SIGALRM, alarmHandler);
        alarm(5);

        wait(NULL);

        alarm(0); // Cancel the alarm
    }

    return 0;
}
