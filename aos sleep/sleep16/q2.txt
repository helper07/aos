#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>

void sighupHandler(int signum) {
    printf("Child process received SIGHUP\n");
}

void sigintHandler(int signum) {
    printf("Child process received SIGINT\n");
}

void sigquitHandler(int signum) {
    printf("Child process received SIGQUIT\n");
    printf("My DADDY has Killed me!!!\n");
    exit(0);
}

int main() {
    pid_t pid = fork();

    if (pid == -1) {
        perror("Fork error");
        exit(1);
    }

    if (pid == 0) {
        // Child process
        signal(SIGHUP, sighupHandler);
        signal(SIGINT, sigintHandler);
        signal(SIGQUIT, sigquitHandler);

        while (1) {
            sleep(1);
        }
    } else {
        // Parent process
        for (int i = 0; i < 30; i += 3) {
            sleep(3);
            if (i % 6 == 0) {
                kill(pid, SIGHUP);
            } else {
                kill(pid, SIGINT);
            }
        }

        kill(pid, SIGQUIT);
        wait(NULL);
    }

    return 0;
}
