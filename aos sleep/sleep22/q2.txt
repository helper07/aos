#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <signal.h>

int main() {
    // Block Ctrl-C and Ctrl-\
    signal(SIGINT, SIG_IGN);
    signal(SIGQUIT, SIG_IGN);

    int pipe_fd[2];
    pid_t pid1, pid2;

    pipe(pipe_fd);

    pid1 = fork();

    if (pid1 == -1) {
        perror("Fork error");
        exit(1);
    }

    if (pid1 == 0) {
        // Child process 1 (ls -l)
        close(pipe_fd[0]);
        dup2(pipe_fd[1], STDOUT_FILENO);
        close(pipe_fd[1]);

        execlp("ls", "ls", "-l", (char *)NULL);
        perror("Exec error");
        exit(1);
    } else {
        pid2 = fork();

        if (pid2 == -1) {
            perror("Fork error");
            exit(1);
        }

        if (pid2 == 0) {
            // Child process 2 (wc -l)
            close(pipe_fd[1]);
            dup2(pipe_fd[0], STDIN_FILENO);
            close(pipe_fd[0]);

            execlp("wc", "wc", "-l", (char *)NULL);
            perror("Exec error");
            exit(1);
        } else {
            // Parent process
            close(pipe_fd[0]);
            close(pipe_fd[1]);

            waitpid(pid1, NULL, 0);
            waitpid(pid2, NULL, 0);
        }
    }

    return 0;
}
